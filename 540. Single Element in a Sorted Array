class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length;
        int low = 1,high = n-2;

        if(n==1){
            return nums[0];
        }
        if(nums[0] != nums[1]){
            return nums[0];
        }
        if(nums[n-1] != nums[n-2]){
            return nums[n-1];
        }

        while(low <= high){
            int mid = (low+high)/2;

            if(nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1]){
                return nums[mid];
            }
            // if ele is in left or right half
            // element is on right half , eliminating left half of array 
            if((mid % 2 == 1 && nums[mid-1] == nums[mid]) || (mid % 2 == 0 && nums[mid] == nums[mid+1])){
                low = mid+1;
            }
            else{
                // element is on left half , eliminating right half of array
                high = mid -1;
            }
        }
        return -1;
    }
}
